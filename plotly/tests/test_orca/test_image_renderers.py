import base64
import sys

import pytest

from plotly import io as pio
import plotly.graph_objs as go

if sys.version_info.major == 3 and sys.version_info.minor >= 3:
    import unittest.mock as mock
else:
    import mock


# fixtures
# --------
@pytest.fixture
def fig1(request):
    return go.Figure(data=[{'type': 'scatter',
                            'marker': {'color': 'green'}}],
                     layout={'title': {'text': 'Figure title'}})


def test_png_renderer_mimetype(fig1):
    pio.renderers.default = 'png'

    # Configure renderer so that we can use the same parameters
    # to build expected image below
    pio.renderers['png'].width = 400
    pio.renderers['png'].height = 500
    pio.renderers['png'].scale = 1

    image_bytes = pio.to_image(fig1, width=400, height=500, scale=1)
    image_str = base64.b64encode(image_bytes).decode('utf8')

    expected = {'image/png': image_str}

    pio.renderers.render_on_display = False
    assert fig1._repr_mimebundle_(None, None) is None

    pio.renderers.render_on_display = True
    bundle = fig1._repr_mimebundle_(None, None)
    assert bundle == expected


def test_svg_renderer_show(fig1):
    pio.renderers.default = 'svg'
    pio.renderers['svg'].width = 400
    pio.renderers['svg'].height = 500
    pio.renderers['svg'].scale = 1

    with mock.patch('IPython.display.display') as mock_display:
        pio.show(fig1)

    # Check call args.
    # SVGs generated by orca are currently not reproducible so we just
    # check the mime type and that the resulting string is an SVG with the
    # expected size
    mock_call_args = mock_display.call_args

    mock_arg1 = mock_call_args[0][0]
    assert list(mock_arg1) == ['image/svg+xml']
    assert mock_arg1['image/svg+xml'].startswith(
        '<svg class="main-svg" xmlns="http://www.w3.org/2000/svg" '
        'xmlns:xlink="http://www.w3.org/1999/xlink" '
        'width="400" height="500"')

    mock_kwargs = mock_call_args[1]
    assert mock_kwargs == {'raw': True}


def test_pdf_renderer_show_override_multi(fig1):
    pio.renderers.default = None

    # Configure renderer so that we can use the same parameters
    # to build expected image below
    pio.renderers['png'].width = 400
    pio.renderers['png'].height = 500
    pio.renderers['png'].scale = 1

    pio.renderers['pdf'].width = 400
    pio.renderers['pdf'].height = 500
    pio.renderers['pdf'].scale = 1

    image_bytes_pdf = pio.to_image(
        fig1, format='pdf', width=400, height=500, scale=1)

    image_bytes_png = pio.to_image(
        fig1, format='png', width=400, height=500, scale=1)

    image_str_pdf = base64.b64encode(image_bytes_pdf).decode('utf8')
    image_str_png = base64.b64encode(image_bytes_png).decode('utf8')

    with mock.patch('IPython.display.display') as mock_display:
        pio.show(fig1, renderer='pdf+png')

    expected_bundle = {'application/pdf': image_str_pdf,
                       'image/png': image_str_png}

    mock_display.assert_called_once_with(expected_bundle, raw=True)
